// 1-arg
FTD2XX_API FT_STATUS WINAPI FT_Close(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_ClrDtr(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_ClrRts(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_CreateDeviceInfoList(LPDWORD lpdwNumDevs);
FTD2XX_API FT_STATUS WINAPI FT_CyclePort(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_EraseEE(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_GetLibraryVersion(LPDWORD lpdwDLLVersion);
FTD2XX_API FT_STATUS WINAPI FT_ResetDevice(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_ResetPort(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_RestartInTask(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_SetBreakOff(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_SetBreakOn(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_SetDtr(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_SetRts(FT_HANDLE ftHandle);
FTD2XX_API FT_STATUS WINAPI FT_StopInTask(FT_HANDLE ftHandle);
FTD2XX_API BOOL WINAPI FT_W32_CancelIo(FT_HANDLE ftHandle);
FTD2XX_API BOOL WINAPI FT_W32_ClearCommBreak(FT_HANDLE ftHandle);
FTD2XX_API BOOL WINAPI FT_W32_CloseHandle(FT_HANDLE ftHandle);
FTD2XX_API DWORD WINAPI FT_W32_GetLastError(FT_HANDLE ftHandle);
FTD2XX_API BOOL WINAPI FT_W32_SetCommBreak(FT_HANDLE ftHandle);

// 2-arg
FTD2XX_API FT_STATUS WINAPI FT_EE_Program(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData);
FTD2XX_API FT_STATUS WINAPI FT_EE_Read(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData);
FTD2XX_API FT_STATUS WINAPI FT_EE_UASize(FT_HANDLE ftHandle, LPDWORD lpdwSize);
FTD2XX_API FT_STATUS WINAPI FT_GetBitMode(FT_HANDLE ftHandle, PUCHAR pucMode);
FTD2XX_API FT_STATUS WINAPI FT_GetDeviceInfoList(FT_DEVICE_LIST_INFO_NODE *pDest, LPDWORD lpdwNumDevs);
FTD2XX_API FT_STATUS WINAPI FT_GetDriverVersion(FT_HANDLE ftHandle, LPDWORD lpdwDriverVersion);
FTD2XX_API FT_STATUS WINAPI FT_GetEventStatus(FT_HANDLE ftHandle, DWORD *dwEventDWord);
FTD2XX_API FT_STATUS WINAPI FT_GetLatencyTimer(FT_HANDLE ftHandle, PUCHAR pucLatency);
FTD2XX_API FT_STATUS WINAPI FT_GetModemStatus(FT_HANDLE ftHandle, ULONG *lpdwModemStatus);
FTD2XX_API FT_STATUS WINAPI FT_GetQueueStatus(FT_HANDLE ftHandle, DWORD *lpdwAmountInRxQueue);
FTD2XX_API FT_STATUS FT_GetVIDPID(DWORD *pdwVID, DWORD *pdwPID);
FTD2XX_API FT_STATUS WINAPI FT_Open(int deviceNumber, FT_HANDLE *pHandle);
FTD2XX_API FT_STATUS WINAPI FT_Purge(FT_HANDLE ftHandle, ULONG ulMask);
FTD2XX_API FT_STATUS WINAPI FT_SetBaudRate(FT_HANDLE ftHandle, ULONG dwBaudRate);
FTD2XX_API FT_STATUS WINAPI FT_SetDeadmanTimeout(FT_HANDLE ftHandle, ULONG ulDeadmanTimeout);
FTD2XX_API FT_STATUS WINAPI FT_SetDivisor(FT_HANDLE ftHandle, USHORT usDivisor);
FTD2XX_API FT_STATUS WINAPI FT_SetLatencyTimer(FT_HANDLE ftHandle, UCHAR ucLatency);
FTD2XX_API FT_STATUS WINAPI FT_SetResetPipeRetryCount(FT_HANDLE ftHandle, DWORD dwCount);
FTD2XX_API FT_STATUS FT_SetVIDPID(DWORD dwVID, DWORD dwPID);
FTD2XX_API FT_STATUS WINAPI FT_SetWaitMask(FT_HANDLE ftHandle, DWORD Mask);
FTD2XX_API BOOL WINAPI FT_W32_EscapeCommFunction(FT_HANDLE ftHandle, DWORD dwFunc);
FTD2XX_API BOOL WINAPI FT_W32_GetCommModemStatus(FT_HANDLE ftHandle, LPDWORD lpdwModemStatus);
FTD2XX_API BOOL WINAPI FT_W32_GetCommState(FT_HANDLE ftHandle, LPFTDCB lpftDcb);
FTD2XX_API BOOL WINAPI FT_W32_GetCommTimeouts(FT_HANDLE ftHandle, FTTIMEOUTS *pftTimeouts);
FTD2XX_API BOOL WINAPI FT_W32_PurgeComm(FT_HANDLE ftHandle, DWORD dwMask);
FTD2XX_API BOOL WINAPI FT_W32_SetCommMask(FT_HANDLE ftHandle, ULONG ulEventMask);
FTD2XX_API BOOL WINAPI FT_W32_SetCommState(FT_HANDLE ftHandle, LPFTDCB lpftDcb);
FTD2XX_API BOOL WINAPI FT_W32_SetCommTimeouts(FT_HANDLE ftHandle, FTTIMEOUTS *pftTimeouts);
FTD2XX_API FT_STATUS WINAPI FT_WaitOnMask(FT_HANDLE ftHandle, DWORD *Mask);

// 3-arg
FTD2XX_API FT_STATUS WINAPI FT_EE_UAWrite(FT_HANDLE ftHandle, PUCHAR pucData, DWORD dwDataLen);
FTD2XX_API FT_STATUS WINAPI FT_ListDevices(PVOID pvArg1, PVOID pvArg2, DWORD dwFlags);
FTD2XX_API FT_STATUS WINAPI FT_OpenEx(PVOID pvArg1, DWORD dwFlags, FT_HANDLE *pHandle);
FTD2XX_API FT_STATUS WINAPI FT_ReadEE(FT_HANDLE ftHandle, DWORD dwWordOffset, LPWORD lpwValue);
FTD2XX_API FT_STATUS WINAPI FT_SetBitMode(FT_HANDLE ftHandle, UCHAR ucMask, UCHAR ucEnable);
FTD2XX_API FT_STATUS WINAPI FT_SetEventNotification(FT_HANDLE ftHandle, DWORD dwEventMask, PVOID pvArg);
FTD2XX_API FT_STATUS WINAPI FT_SetTimeouts(FT_HANDLE ftHandle, ULONG dwReadTimeout, ULONG dwWriteTimeout);
FTD2XX_API FT_STATUS WINAPI FT_SetUSBParameters(FT_HANDLE ftHandle, ULONG ulInTransferSize, ULONG ulOutTransferSize);
FTD2XX_API BOOL WINAPI FT_W32_ClearCommError(FT_HANDLE ftHandle, LPDWORD lpdwErrors, LPFTCOMSTAT lpftComstat);
FTD2XX_API BOOL WINAPI FT_W32_SetupComm(FT_HANDLE ftHandle, DWORD dwReadBufferSize, DWORD dwWriteBufferSize);
FTD2XX_API BOOL WINAPI FT_W32_WaitCommEvent(FT_HANDLE ftHandle, PULONG pulEvent, LPOVERLAPPED lpOverlapped);
FTD2XX_API FT_STATUS WINAPI FT_WriteEE(FT_HANDLE ftHandle, DWORD dwWordOffset, WORD wValue);

// 4-arg
FTD2XX_API FT_STATUS WINAPI FT_EE_UARead(FT_HANDLE ftHandle, PUCHAR pucData, DWORD dwDataLen, LPDWORD lpdwBytesRead);
FTD2XX_API FT_STATUS WINAPI FT_GetStatus(FT_HANDLE ftHandle, DWORD *lpdwAmountInRxQueue, DWORD *lpdwAmountInTxQueue, DWORD *lpdwEventStatus);
FTD2XX_API FT_STATUS WINAPI FT_Read(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD dwBytesToRead, LPDWORD lpdwBytesReturned);
FTD2XX_API FT_STATUS WINAPI FT_SetDataCharacteristics(FT_HANDLE ftHandle, UCHAR uWordLength, UCHAR uStopBits, UCHAR uParity);
FTD2XX_API FT_STATUS WINAPI FT_SetFlowControl(FT_HANDLE ftHandle, USHORT usFlowControl, UCHAR uXonChar, UCHAR uXoffChar);
FTD2XX_API BOOL WINAPI FT_W32_GetOverlappedResult(FT_HANDLE ftHandle, LPOVERLAPPED lpOverlapped, LPDWORD lpdwBytesTransferred, BOOL bWait);
FTD2XX_API FT_STATUS WINAPI FT_Write(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD dwBytesToWrite, LPDWORD lpdwBytesWritten);

// 5-arg
FTD2XX_API FT_STATUS WINAPI FT_SetChars(FT_HANDLE ftHandle, UCHAR uEventChar, UCHAR uEventCharEnabled, UCHAR uErrorChar, UCHAR uErrorCharEnabled);
FTD2XX_API BOOL WINAPI FT_W32_ReadFile(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpdwBytesReturned, LPOVERLAPPED lpOverlapped);
FTD2XX_API BOOL WINAPI FT_W32_WriteFile(FT_HANDLE ftHandle, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpdwBytesWritten, LPOVERLAPPED lpOverlapped);

// 6-arg
FTD2XX_API FT_STATUS WINAPI FT_EE_ProgramEx(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
FTD2XX_API FT_STATUS WINAPI FT_EE_ReadEx(FT_HANDLE ftHandle, PFT_PROGRAM_DATA pData, char *Manufacturer, char *ManufacturerId, char *Description, char *SerialNumber);
FTD2XX_API FT_STATUS WINAPI FT_GetDeviceInfo(FT_HANDLE ftHandle, FT_DEVICE *lpftDevice, LPDWORD lpdwID, PCHAR pcSerialNumber, PCHAR pcDescription, LPVOID pvDummy);

// other
FTD2XX_API FT_HANDLE WINAPI FT_W32_CreateFile(LPCTSTR lpszName, DWORD dwAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreate, DWORD dwAttrsAndFlags, HANDLE hTemplate); // 7
FTD2XX_API FT_STATUS WINAPI FT_GetDeviceInfoDetail(DWORD dwIndex, LPDWORD lpdwFlags, LPDWORD lpdwType, LPDWORD lpdwID, LPDWORD lpdwLocId, LPVOID lpSerialNumber, LPVOID lpDescription, FT_HANDLE *pftHandle); // 8
FTD2XX_API FT_STATUS WINAPI FT_IoCtl(FT_HANDLE ftHandle, DWORD dwIoControlCode, LPVOID lpInBuf, DWORD nInBufSize, LPVOID lpOutBuf, DWORD nOutBufSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped); // 8
